// scripts.js

const MONTHS = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

const getDaysInMonth = (date) =>
  new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();

// Only edit below

const createArray = (length) => {
  //  function takes a length parameter and creates an array of numbers from 0 to length - 1 using a while loop.
  const result = [];
  let counter = 0;

  while (result.length < length) {
    result.push(counter++);
  }

  return result;
};

const createData = () => {
  // function generates the data for the calendar.
  const current = new Date();
  current.setDate(1); // date object set to the current date and sets the day to the 1st of the month.

  const startDay = current.getDay(); // is the day of the week (0-6, where 0 is Sunday) for the 1st day of the month.
  const daysInMonth = getDaysInMonth(current); // total days in month

  const weeks = createArray(Math.ceil(daysInMonth / 7)); // The weeks array is created using createArray(Math.ceil(daysInMonth / 7)), which determines the number of weeks needed to display all the days of the month.
  const days = createArray(7); //The days array contains the numbers from 0 to 6, representing the days of the week (0 is Sunday, 6 is Saturday).
  const result = [];

  for (const weekIndex of weeks) {
    const weekData = {
      // a weekData object is created with the week property set to the current week index and an empty days array.
      week: weekIndex + 1,
      days: [],
    };

    for (const dayIndex of days) {
      // The inner loop iterates over the days array.
      const day = dayIndex - startDay + weekIndex * 7 + 1; // The day variable is calculated by adding the current dayIndex to the day of the week of the 1st day of the month (startDay),
      const isValid = day > 0 && day <= daysInMonth; //        adjusted for the current week. This determines the actual day value for each cell in the calendar.

      weekData.days.push({
        dayOfWeek: dayIndex + 1, // This determines the actual day value for each cell in the calendar.
        value: isValid ? day : "",
      }); // The isValid variable is true if the day value falls within the range of valid days for the month.
    }
    result.push(weekData);
  }

  return result;
};

const addCell = (existing, classString, value) => {
  // he addCell function is a helper function that takes the existing HTML, class string, and value,
  //and returns the HTML for a table cell with the given class and value.
  const result = /* html */ `
        ${existing}

        <td class="${classString}">
            &nbsp;${value}&nbsp;
        </td>
    `;

  return result;
};

const createHtml = (data) => {
  //The createHtml function generates the HTML markup for the
  let result = ""; // calendar using the data array generated by createData.
  //starts with an empty result string.
  for (const { week, days } of data) {
    //  iterates over each { week, days } object in the data array.
    let inner = ""; // For each week, it initializes the inner string.
    inner = addCell(inner, "table__cell table__cell_sidebar", `Week ${week}`);
    // It calls addCell to add a table cell with the class "table__cell_sidebar" and the text "Week {week}" to the inner string.
    for (const { dayOfWeek, value } of days) {
      //  iterates over each
      const isToday = new Date().getDate() === value;
      const isWeekend = dayOfWeek === 6 || dayOfWeek === 0;
      const isAlternate = week % 2 === 0;
      // For each day, it checks if it's today's date, a weekend day, or an alternate week.
      let classString = "table__cell";
      // It modifies the classString accordingly by appending the appropriate class names.
      if (isToday) classString += " table__cell_today";
      if (isWeekend) classString += " table__cell_weekend";
      if (isAlternate) classString += " table__cell_alternate";

      inner = addCell(inner, classString, value);
    } // It calls addCell to add a table cell with the classString

    result += `
      
    <tr>${inner}</tr>
`;
  }

  return result;
};

// Only edit above

const current = new Date();
document.querySelector("[data-title]").innerText = `${
  MONTHS[current.getMonth()]
} ${current.getFullYear()}`;

const data = createData();
document.querySelector("[data-content]").innerHTML = createHtml(data);
